
service: api-ruse-tech
frameworkVersion: '2'

provider:
  name: aws
  runtime: python3.8
  lambdaHashingVersion: 20201221
  stage: v1
  region: us-west-2
  apiGateway:
    shouldStartNameWithService: True
  iam:
    role:
      statements:
        - Effect: "Allow"
          Action:
            - "s3:ListBucket"
            - "s3:GetObject"
          Resource: 
            - "arn:aws:s3:::blogs.ruse.tech"
            - "arn:aws:s3:::blogs.ruse.tech/*"

  resources: #cloudformation syntax
    Resources:
      GatewayResponseDefault4XX:
        Type: 'AWS::ApiGateway::GatewayResponse'
        Properties:
          ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
          ResponseType: DEFAULT_4XX
          RestApiId:
            Ref: 'ApiGatewayRestApi'

package:
  individually: True
  exclude:
    # Exclude everything first.
    - '**/*'

plugins:
  - serverless-layers
custom:
  serverless-layers:
    layersDeploymentBucket: ruse-api-layers

functions:
  
  auth:
    handler: auth/auth.handler
    package:
      include:
        - auth/auth.py
        - auth/jwks.json

  listBlogs:
    handler: blogs/list.list
    events:
      - http:
          path: blogs
          method: get
          cors: True
    package:
      include:
        - blogs/**
    environment:
      BLOGMETADATA: metadata.json
      BUCKET: blogs.ruse.tech

  getBlog:
    handler: blogs/get.get
    events:
      - http:
          path: blogs/{title}
          method: get
          cors: True
    environment:
      BLOGMETADATA: metadata.json
      BUCKET: blogs.ruse.tech
      BLOGINDEX: index.md
    package:
      include:
        - blogs/**

  yeetBlog:
    handler: blogs/yeet.yeet
    events:
      - http:
          path: blogs/yeet
          cors: True
          method: get
          authorizer:
            name: auth
    package:
      include:
        - blogs/**